package main

/*
	Реализовать паттерн «стратегия».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Strategy_pattern
*/

/*
	Стратегия — это поведенческий паттерн проектирования, который определяет семейство
	схожих алгоритмов и помещает каждый из них в собственный класс, после чего алгоритмы
	можно взаимозаменять прямо во время исполнения программы.

	Плюсы:
	- Выбор и комбинирование алгоритмов во время выполнения
	- Изолирует код и данные алгоритмов от остальных классов
	- Упрощение поддержки и изменения разных вариантов алгоритмов

	Минусы:
	- Может создать дополнительную сложность из-за необходимости создания множества классов стратегий
	- Клиент должен знать о различных стратегиях и выбирать их аккуратно
*/

type PaymentStrategy interface {
	Pay()
}

type Card struct {
}

func (c *Card) Pay() {
}

type SBP struct {
}

func (s *SBP) Pay() {
}

type Qiwi struct {
}

func (q *Qiwi) Pay() {
}

type ShoppingCart struct {
	strategy PaymentStrategy
}

func (s *ShoppingCart) setStrategy(strategy PaymentStrategy) {
	s.strategy = strategy
}
